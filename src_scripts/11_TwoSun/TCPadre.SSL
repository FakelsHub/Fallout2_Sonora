#include "..\headers\define.h"
//---------------------

#define NAME                            SCRIPT_TCPadre
#define TOWN_REP_VAR                    GVAR_TOWN_REP_VILLA   // привязка к репутации (-1, если не нужно)

#define NUM_TEAM                        TEAM_PLAYER           // группа, к которой принадлежит персонаж (-1 если нужно оставить Team, заданный в редакторе)
#define NUM_AI                          AI_TRIBLE_VILLA       // AI персонажа (-1 если нужно оставить AI, заданный в редакторе)
#define KILL_SLAVA                      SLAVA_KILL_GOOD       // слава за убийство этого персонажа (SLAVA_KILL_GOOD, SLAVA_KILL_BAD, SLAVA_KILL_NEITRAL, SLAVA_KILL_CHILD)
#define KILL_TOWN_REP                   REP_KILL_NEITRAL      // репутация за убийство этого персонажа (REP_KILL_GOOD, REP_KILL_BAD, REP_KILL_NEITRAL, REP_KILL_CRITICAL для враждебности всего поселения, REP_KILL_CHILD)
#define KILL_FRAC_REP                   FRAC_NON              // принадлежность определенной фракции (-1, если не нужно)

#define FLAG_STEAL                      0  // Нижний порог навыка для кражи (для торговцев 200, для животных 300)
#define FLAG_ALCOHOL                    1  // Примет ли алкоголь от ГГ: 0 - принимает, 1 - не принимает
#define FLAG_FOOD                       1  // Примет ли пищу от ГГ: 0 - принимает, 1 - не принимает

//---------------------

procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure pickup_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;

procedure Node998;
procedure Node999;
procedure NodeStartDialog;
procedure NodeStopDialog;
procedure NodeFstDialog;
procedure NodeFstDialog2;
procedure NodeFstDialog3;
procedure NodeFstDialog4;
procedure NodeFstDialog5;
procedure NodeFstDialog6;
procedure NodeFstDialog7;
procedure NodeSndDialog;
procedure NodeSndDialog100;
procedure NodeSndDialog101;
procedure NodeSndDialog102;
procedure NodeSndDialog103;
procedure NodeSndDialog200;
procedure NodeSndDialog201;
procedure NodeSndDialog202;
procedure NodeSndDialog300;
procedure NodeSndDialog301;
procedure NodeSndDialog302;
procedure NodeParty;
procedure NodeParty1;
procedure NodeParty2;
procedure NodeQstEnd;
procedure NodeQstEnd1;
procedure NodeQstEnd2;
procedure NodeQstEnd3;
procedure NodeQstEnd4;
procedure NodeQstEnd5;

//---------------------

//#define LVAR_Flag_A                     (6) // отвечает за ...

//---------------------



procedure start begin
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
       set_start_home
       if (map_var(MVAR_TWOSUN_PartyPadre) >0) then begin
       rm_timer_event(self_obj);
       move_to(self_obj, (tile_num_in_direction(dude_tile,random(0,5),1)), dude_elevation);
       end
       if (global_var(GVAR_VILLA_STATUS_PADRE) > 0) then begin
       set_map_var(MVAR_TWOSUN_PartyPadre,0);
       rm_timer_event(self_obj);
       set_obj_visibility(self_obj, 1);
       destroy_object(self_obj);
       end
   end
end

procedure look_at_p_proc begin
   lookProcMsg
end

procedure description_p_proc begin
   dsrptProcMsg
end

procedure timed_event_p_proc begin
   // Таймер за номером 1 рарезервирован под перемещение персонажа по локации
   // Таймер за номером 2 рарезервирован под всплывающие реплики
   if (fixed_param == 1) then begin
       timer_move_to_home
   end
   if (fixed_param == 2) then begin
       //timer_float_reply(120,121)
   end
end

procedure critter_p_proc begin
   set_critter_options(0,0) //условие нападения (0 личная вражда, 1 вражда клановая, 2 всегда), разворот к ГГ
   if (map_var(MVAR_TWOSUN_PartyPadre) >0) then begin
   partyRunToDude
   end
end

procedure use_skill_on_p_proc begin
   skillUseSteal
   skillUseFAid
end

procedure pickup_p_proc begin
   pickupProcCritter
end

procedure use_obj_on_p_proc begin
   UsedItemToCrit_Proc
end

procedure combat_p_proc begin
   effectAttak(0,0,1,1,1) //отравление min, облучение min, травма ног %, травма рук %, травма глаз %
end

procedure damage_p_proc begin
   set_damage_dude
end

procedure destroy_p_proc begin
   set_global_var(GVAR_VILLA_STATUS_PADRE,-1);
   setQuest(GVAR_MAIN_QUEST_TWOSUN,qEnd);
   setQuest(GVAR_TWOSUN_QST_PADRE,qEnd);
   if (getQuest(GVAR_MAIN_QUEST_PHENIX) == qStart) then begin
   setQuest(GVAR_MAIN_QUEST_PHENIX,qEnd);
   end
   set_map_var(MVAR_TWOSUN_PartyPadre,0);
   kill_critter_opt
   display_mstr(102);
   kill_critter_dude_reply(105,106)
end

procedure talk_p_proc begin
   setReaction(1) // Отношение к ГГ(1 - персонаж положительный, -1 отрицательный, 0 нейтральный)
   dialog_proc(0,0,NodeStartDialog,-1,-1)
end

procedure Node998 begin
   set_map_var(MVAR_TWOSUN_PartyPadre,0);
   set_enemy_dude;
end

procedure Node999 begin
end

procedure NodeStartDialog begin
   if (bitDialog(bit_1) == 0) then begin
   call NodeFstDialog;
   end
   else if (global_var(GVAR_VILLA_STATUS_PADRE) > 0) then begin
   call NodeStopDialog;
   end
   else begin
   call NodeSndDialog;
   end
end

//--- ДИАЛОГ ПОСЛЕ ОСВОБОЖДЕНИЯ

procedure NodeStopDialog begin
   Reply(309)
   NAnswer(310,1,Node999)
end

//--- ПЕРВЫЙ ДИАЛОГ

procedure NodeFstDialog begin
   setQuest(GVAR_TWOSUN_QST_PADRE,qEnd);
   bitDialogExp(bit_1,350)
   Reply(dude_name+mstr(200))
   NAnswer(201,1,NodeFstDialog2)
end

procedure NodeFstDialog2 begin
   Reply(202)
   NAnswer(203,1,NodeFstDialog3)
end

procedure NodeFstDialog3 begin
   if (getQuest(GVAR_MAIN_QUEST_FLAGSTAFF) < qStart) then begin
   setQuest(GVAR_MAIN_QUEST_FLAGSTAFF,qStart);
   end
   if (getQuest(GVAR_MAIN_QUEST_TWOSUN) < qStart) then begin
   setQuest(GVAR_MAIN_QUEST_TWOSUN,qStart);
   end

   Reply(204)
   if (getQuest(GVAR_MAIN_QUEST_FLAGSTAFF) >= qEnd) then begin
   NAnswer(205,1,NodeFstDialog4)
   end
   else begin
   BAnswer(207,1,NodeFstDialog5)
   end
   BAnswer(214,1,NodeFstDialog5)
end

procedure NodeFstDialog4 begin
   Reply(206)
   NAnswer(209,1,NodeFstDialog6)
end

procedure NodeFstDialog5 begin
   Reply(208)
   NAnswer(209,1,NodeFstDialog6)
end

procedure NodeFstDialog6 begin
   Reply(210)
   NAnswer(211,1,NodeFstDialog7)
end

procedure NodeFstDialog7 begin
   Reply(212)
   GAnswer(213,1,Node999)
   BAnswer(215,1,Node999)
end

//--- ПОВТОРНЫЙ ДИАЛОГ

procedure NodeSndDialog begin
   Reply(mstr(220)+dude_name+mstr(221))

   NAnswer(230,1,NodeSndDialog100)
   NAnswer(240,1,NodeSndDialog200)
   NAnswer(250,1,NodeSndDialog300)

   if (global_var(GVAR_TWOSUN_STATUS_ZAX) <0) then begin
   NAnswer(303,1,NodeQstEnd1)
   end
   else if (global_var(GVAR_TWOSUN_STATUS_ZAX) >0) then begin
   NAnswer(303,1,NodeQstEnd2)
   end
   else if (getQuest(GVAR_MAIN_QUEST_TWOSUN) >= qEnd) then begin
   NAnswer(300,1,NodeQstEnd)
   end

   if (map_var(MVAR_TWOSUN_PartyPadre) == 0) then begin
   NAnswer(260,1,NodeParty)
   end
   else begin
   NAnswer(266,1,NodeParty1)
   end

   NAnswer(222,1,Node999)
end

procedure NodeSndDialog100 begin
   Reply(231)
   NAnswer(233,1,NodeSndDialog101)
   NAnswer(235,1,NodeSndDialog102)
   NAnswer(237,1,NodeSndDialog103)
   NAnswer(232,1,NodeSndDialog)
end

procedure NodeSndDialog101 begin
   Reply(234)
   NAnswer(235,1,NodeSndDialog102)
   NAnswer(237,1,NodeSndDialog103)
   NAnswer(232,1,NodeSndDialog)
end

procedure NodeSndDialog102 begin
   Reply(236)
   NAnswer(233,1,NodeSndDialog101)
   NAnswer(237,1,NodeSndDialog103)
   NAnswer(232,1,NodeSndDialog)
end

procedure NodeSndDialog103 begin
   bitDialogExp(bit_5,10)
   Reply(238)
   NAnswer(233,1,NodeSndDialog101)
   NAnswer(235,1,NodeSndDialog102)
   NAnswer(232,1,NodeSndDialog)
end

procedure NodeSndDialog200 begin
   Reply(241)
   NAnswer(242,1,NodeSndDialog201)
   NAnswer(232,1,NodeSndDialog)
end

procedure NodeSndDialog201 begin
   Reply(243)
   NAnswer(244,1,NodeSndDialog202)
   NAnswer(232,1,NodeSndDialog)
end

procedure NodeSndDialog202 begin
   bitDialogExp(bit_3,50)
   Reply(245)
   NAnswer(246,1,NodeSndDialog)
end

procedure NodeSndDialog300 begin
   Reply(251)
   NAnswer(255,1,NodeSndDialog302)
   if (getQuest(GVAR_MAIN_QUEST_PHENIX) > qZero) then begin
   NAnswer(252,1,NodeSndDialog301)
   end
   NAnswer(232,1,NodeSndDialog)
end

procedure NodeSndDialog301 begin
   bitDialogExp(bit_4,25)
   Reply(253)
   NAnswer(255,1,NodeSndDialog302)
   NAnswer(246,1,NodeSndDialog)
end

procedure NodeSndDialog302 begin
   Reply(256)
   if (getQuest(GVAR_MAIN_QUEST_PHENIX) > qZero) then begin
   NAnswer(252,1,NodeSndDialog301)
   end
   NAnswer(232,1,NodeSndDialog)
end

//--- ПАРТИЯ

procedure NodeParty begin
   set_map_var(MVAR_TWOSUN_PartyPadre,1);
   rm_timer_event(self_obj);
   Reply(261)
   NAnswer(263,1,NodeParty2)
   NAnswer(262,1,Node999)
end

procedure NodeParty1 begin
   set_map_var(MVAR_TWOSUN_PartyPadre,0);
   Reply(267)
   NAnswer(268,1,Node999)
end

procedure NodeParty2 begin
   Reply(264)
   NAnswer(265,1,Node999)
end

//--- ЗАВЕРШЕНИЕ КВЕСТА

procedure NodeQstEnd begin
   Reply(301)
   NAnswer(302,1,Node999)
end

procedure NodeQstEnd1 begin
   Reply(mstr(304)+dude_name+mstr(305))
   NAnswer(306,1,NodeQstEnd3)
end

procedure NodeQstEnd2 begin
   Reply(mstr(307)+dude_name+mstr(308))
   NAnswer(306,1,NodeQstEnd3)
end

procedure NodeQstEnd3 begin
   Reply(309)

   if (getQuest(GVAR_TWOSUN_QST_KARLOS) >= qEnd) then begin
   NAnswer(310,1,NodeQstEnd5)
   end
   else begin
   NAnswer(310,1,NodeQstEnd4)
   end
end

procedure NodeQstEnd4 begin
   Reply(311)
   GAnswer(312,1,NodeQstEnd5)
   NAnswer(313,1,NodeQstEnd5)
end

procedure NodeQstEnd5 begin
   set_global_var(GVAR_VILLA_STATUS_PADRE,1);
   setQuest(GVAR_MAIN_QUEST_TWOSUN,qEnd);
   if (getQuest(GVAR_MAIN_QUEST_PHENIX) == qStart) then begin
   setQuest(GVAR_MAIN_QUEST_PHENIX,qEnd);
   end
   setQuest(GVAR_TWOSUN_QST_KARLOS,qStart);
   if (global_var(GVAR_TWOSUN_STATUS_KARLOS) < 0) then begin
   setQuest(GVAR_TWOSUN_QST_KARLOS,qEnd);
   end
   exp_add_msg(2500,NAME,103,104);
   set_REP(15)

   rm_timer_event(self_obj);
   party_remove(self_obj);
   set_obj_visibility(self_obj, 1);
   //destroy_object(self_obj);
   call Node999;
end
